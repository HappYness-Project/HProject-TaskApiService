
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" SCHEMA public; -- To use uuid_generate_v7 custom function.

-- Creating uuid generate v7 method - this feature is not implemented in postgres 17 yet.
-- Will be implemented in 18.
create or replace function public.uuid_generate_v7()
returns uuid
as $$
begin
  -- use random v4 uuid as starting point (which has the same variant we need)
  -- then overlay timestamp
  -- then set version 7 by flipping the 2 and 1 bit in the version 4 string
  return encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid())
                placing substring(int8send(floor(extract(epoch from clock_timestamp()) * 1000)::bigint) from 3)
                from 1 for 6
        ),
        52, 1
      ),
      53, 1
    ),
    'hex')::uuid;
end
$$
language plpgsql
volatile;


CREATE TABLE IF NOT EXISTS public.user (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id uuid DEFAULT public.uuid_generate_v7(),
    username CHARACTER VARYING(100),
    first_name character varying(255),
    last_name character varying(255),
    email character varying(255),
    is_active boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    default_group_id bigint,
    CONSTRAINT pk_user PRIMARY KEY (id)
);
-- SELECT pg_catalog.setval('public.users_id_seq', 1, true);
CREATE TABLE IF NOT EXISTS public.usergroup (
    id int NOT NULL generated always as identity,
    name CHARACTER VARYING(100) NOT NULL,
    description CHARACTER VARYING(255) NOT NULL,
    type CHARACTER VARYING(30),
    thumbnailUrl CHARACTER VARYING(255),
    is_active boolean,
    CONSTRAINT pk_usergroup PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.task (
    id uuid NOT NULL,
    name character varying(100) NOT NULL,
    description character varying(512),
    type CHARACTER VARYING(20),
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    target_date timestamp with time zone,
    priority character varying(50),
    category character varying(20),
    is_completed boolean NOT NULL,
    is_important boolean NOT NULL,
    CONSTRAINT pk_task PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.taskcontainer (
    id uuid NOT NULL,
    name CHARACTER varying(100) NOT NULL,
    description CHARACTER VARYING(255),
    is_active boolean,
    activity_level INT,
    type CHARACTER (50),
    usergroup_id bigint,
    CONSTRAINT pk_taskcontainer PRIMARY KEY (id),
    CONSTRAINT fk_usergroup_id_taskcontainer_usergroupId FOREIGN KEY (usergroup_id)
        REFERENCES public.usergroup ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.taskcontainer_task (
  taskcontainer_id uuid NOT NULL,
  task_id uuid NOT NULL,
  PRIMARY KEY (taskcontainer_id, task_id),
  CONSTRAINT fk_taskcontainer_task_taskcontainer_id FOREIGN KEY(taskcontainer_id) REFERENCES public.taskcontainer(id) ON DELETE CASCADE,
  CONSTRAINT fk_taskcontainer_task_task_id FOREIGN KEY(task_id) REFERENCES public.task(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.usergroup_user (
  usergroup_id bigint NOT NULL,
  user_id bigint NOT NULL,
  role character varying(20) NOT NULL DEFAULT 'member',
  PRIMARY KEY (usergroup_id, user_id),
  CONSTRAINT fk_usergroup_user_usergroup_id FOREIGN KEY(usergroup_id) REFERENCES public.usergroup(id) ON DELETE CASCADE,
  CONSTRAINT fk_usergroup_user_user_id FOREIGN KEY(user_id) REFERENCES public.user(id) ON DELETE CASCADE,
  CONSTRAINT chk_usergroup_user_role CHECK (role IN ('admin', 'member'))
);


INSERT INTO public."usergroup"(id, name, description, type, thumbnailurl, is_active) OVERRIDING SYSTEM VALUE VALUES (1, 'user group #1', 'Description for user group 1', 'normal', '', true);
INSERT INTO public."usergroup"(id, name, description, type, thumbnailurl, is_active) OVERRIDING SYSTEM VALUE VALUES (2, 'user group #2', 'Description for user group 2', 'normal', '', true);
INSERT INTO public."usergroup"(id, name, description, type, thumbnailurl, is_active) OVERRIDING SYSTEM VALUE VALUES (3, 'user group #3', 'Description for user group 3', 'normal', '', true);
INSERT INTO public."usergroup"(id, name, description, type, thumbnailurl, is_active) OVERRIDING SYSTEM VALUE VALUES (4, 'user group #4', 'Description for user group 4', 'normal', '', true);
INSERT INTO public."usergroup"(id, name, description, type, thumbnailurl, is_active) OVERRIDING SYSTEM VALUE VALUES (5, 'user group #5', 'Description for user group 5', 'normal', '', false);
SELECT setval(pg_get_serial_sequence('public.usergroup', 'id'), (SELECT MAX(id) FROM public.usergroup)); -- Due to duplicate key violate issue - manually reset the a primary key index after restoring from a dump file.

INSERT INTO public."user"(user_id, username, first_name, last_name, email, is_active, created_at, updated_at, default_group_id) VALUES ('01959b38-b3f9-7ec5-8ac8-e353bfe08a2d', 'hyunbin7303',  'kevin',    'park',  'hyunbin7303@gmail.com', 		true, '2024-08-05 00:00:00',  	'2024-08-05 00:00:00',1);
INSERT INTO public."user"(user_id, username, first_name, last_name, email, is_active, created_at, updated_at, default_group_id) VALUES ('01959b39-febd-770d-9e1b-e5ee392fce54', 'macyhorvath17','macy',     'horvath',  'macyhorvath@gmail.com',	true, '2024-08-05 00:00:00',	'2024-08-05 00:00:00',1);
INSERT INTO public."user"(user_id, username, first_name, last_name, email, is_active, created_at, updated_at, default_group_id) VALUES ('01959b3a-405b-7591-86dd-87174e2453fd', 'testing1',     'test',     'check',    'testing1@hproject.com',		true, '2024-08-05 00:00:00', 	'2024-08-05 00:00:00',2);
INSERT INTO public."user"(user_id, username, first_name, last_name, email, is_active, created_at, updated_at, default_group_id) VALUES ('0195c388-d0f4-77d5-be90-971d38344c74', 'testing2',     'test',     'check',    'testing2@hproject.com', 		true, '2024-08-05 00:00:00', 	'2024-08-05 00:00:00',2);

INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (1, 1, 'admin');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (1, 2, 'member');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (1, 3, 'member');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (2, 4, 'admin');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (3, 1, 'admin');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (4, 2, 'member');
INSERT INTO public.usergroup_user(usergroup_id, user_id, role) VALUES (5, 1, 'admin');
INSERT INTO public.taskcontainer(id, name, description, is_active, activity_level, type, usergroup_id) VALUES ('5951f639-c8ce-4462-8b72-c57458c448fd', 'grocery', 'grocery container for my family', true, 0, 'normal', 1);
INSERT INTO public.taskcontainer(id, name, description, is_active, activity_level, type, usergroup_id) VALUES ('22095f67-168a-47f4-9d77-90cf27d77c89', 'chores', 'chores container for my family', true, 0, 'normal', 1);
INSERT INTO public.taskcontainer(id, name, description, is_active, activity_level, type, usergroup_id) VALUES ('9ccba4b5-4745-4d5c-8901-46b159c71516', 'grocery', 'grocery container for my family', true, 0, 'normal', 2);
INSERT INTO public.task(id, name, description, type, created_at, updated_at, target_date, priority, category, is_completed, is_important) VALUES ('94d277a0-245a-4155-aea3-29f6cbabd849', 'Apple', 'need this for apple pie', '', CURRENT_DATE,CURRENT_DATE,CURRENT_DATE + INTERVAL  '6 days', 'normal', 'grocery', false, true);
INSERT INTO public.task(id, name, description, type, created_at, updated_at, target_date, priority, category, is_completed, is_important) VALUES ('06e1840f-b5a9-4008-9add-7170272291d1', 'Banana', 'need this for breakfast', '', CURRENT_DATE,CURRENT_DATE,CURRENT_DATE + INTERVAL  '3 days', 'high', 'grocery', false, false);
INSERT INTO public.task(id, name, description, type, created_at, updated_at, target_date, priority, category, is_completed, is_important) VALUES ('5d89f6e6-59e7-4232-9292-4f0031c43254', 'Banana', 'need this for breakfast', '', CURRENT_DATE,CURRENT_DATE,CURRENT_DATE + INTERVAL  '4 days', 'normal', 'grocery', false, false);
INSERT INTO public.task(id, name, description, type, created_at, updated_at, target_date, priority, category, is_completed, is_important) VALUES ('85b6e084-6995-4e49-b128-2e5700b19b67', 'Green onion', 'need for kimchi', '', CURRENT_DATE,CURRENT_DATE,CURRENT_DATE + INTERVAL  '4 days', 'normal', 'grocery', false, false);
INSERT INTO public.task(id, name, description, type, created_at, updated_at, target_date, priority, category, is_completed, is_important) VALUES ('2ce3fc41-d1c6-45b3-9111-bcb979aa943b', 'Dish Wash', '', '', CURRENT_DATE,CURRENT_DATE,CURRENT_DATE + INTERVAL  '1 days', 'urgent', 'chores', false, false);
INSERT INTO public.taskcontainer_task(taskcontainer_id, task_id) VALUES ('5951f639-c8ce-4462-8b72-c57458c448fd', '94d277a0-245a-4155-aea3-29f6cbabd849');
INSERT INTO public.taskcontainer_task(taskcontainer_id, task_id) VALUES ('5951f639-c8ce-4462-8b72-c57458c448fd', '06e1840f-b5a9-4008-9add-7170272291d1');
INSERT INTO public.taskcontainer_task(taskcontainer_id, task_id) VALUES ('5951f639-c8ce-4462-8b72-c57458c448fd', '5d89f6e6-59e7-4232-9292-4f0031c43254');
INSERT INTO public.taskcontainer_task(taskcontainer_id, task_id) VALUES ('9ccba4b5-4745-4d5c-8901-46b159c71516', '85b6e084-6995-4e49-b128-2e5700b19b67');
INSERT INTO public.taskcontainer_task(taskcontainer_id, task_id) VALUES ('22095f67-168a-47f4-9d77-90cf27d77c89', '2ce3fc41-d1c6-45b3-9111-bcb979aa943b');
